{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to genesisonline","text":"<p>a python wrapper for interacting with the public GENESIS-Online API</p> <p> </p>"},{"location":"#about-genesisonline","title":"About genesisonline","text":"<p>The genesisonline package is a lightweight python wrapper around the GENESIS-Online API which provides access to the database of the German Federal Statistical Office. Its primary function is to:</p> <ul> <li> <p>provide a one-to-one mapping of the RESTful/JSON web services specified in the official user documentation. </p> </li> <li> <p>always return a standardized JSON response, regardless of the underlying API's response structure.</p> </li> </ul>"},{"location":"#prerequisites","title":"Prerequisites","text":"<p>In order to use this wrapper, one has to be a registered user of the GENESIS-Online API. New users can sign up for an account here.</p>"},{"location":"#installing","title":"Installing","text":"<p>To install with pip, use: </p> <pre><code>pip install genesisonline\n</code></pre> <p>For a developer install, first clone the repository and then carry out an editable install:</p> <pre><code>git clone https://github.com/rcrmaron/genesis-online.git\ncd genesis-online\npip install -e .[dev]\n</code></pre>"},{"location":"#example-usage","title":"Example usage","text":"<p>Set up wrapper and verify it is working correctly:</p> <pre><code>from genesisonline import GenesisOnline\n\n# initialize the API wrapper object\ngo = GenesisOnline(username=\"your_username\", password=\"your_password\")\n\n# check if the API is online\ngo.check_api()\n&gt;&gt;&gt; {'User-Agent': 'python-requests/2.31.0'}\n\n# check if the API login was successfull\ngo.check_login()\n&gt;&gt;&gt; {'Status': 'You have been logged in and out successfully!', 'Username': 'your_username'}\n</code></pre> <p>Fetch data from various services and endpoints:</p> <pre><code># data/table/ endpoint\nresponse = go.data.table(name=\"51000-0012\")\n\n# find/find endpoint\nresponse = go.find.find(term=\"waste\", category=\"cubes\", pagelength=\"1\")\n\n# metadata/cube endpoint\nresponse = go.metadata.cube(name=\"12411BJ001\", area=\"all\")\n</code></pre>"},{"location":"client/","title":"Wrapper","text":""},{"location":"client/#genesisonline.client.GenesisOnline","title":"<code>GenesisOnline</code>","text":"<p>Object which represents the GENESIS-Online API.</p> <p>The RESTful web service is a collection of over 40 methods, which are structured in the following attributes.</p> <p>Attributes:</p> Name Type Description <code>test</code> <code>TestService</code> <p>Service containing methods for testing the API.</p> <code>find</code> <code>FindService</code> <p>Service containing methods for finding information.</p> <code>catalogue</code> <code>CatalogueService</code> <p>Service containing methods for listing objects.</p> <code>data</code> <code>DataService</code> <p>Service containing methods for retrieving data.</p> <code>metadata</code> <code>MetadataService</code> <p>Service containing methods for retrieving metadata.</p> <code>services</code> <code>list</code> <p>Overview of all available services.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/client.py</code> <pre><code>class GenesisOnline:\n\"\"\"Object which represents the GENESIS-Online API.\n\n    The RESTful web service is a collection of over 40 methods, which are\n    structured in the following attributes.\n\n    Attributes:\n        test (TestService): Service containing methods for testing the API.\n        find (FindService): Service containing methods for finding information.\n        catalogue (CatalogueService): Service containing methods for listing objects.\n        data (DataService): Service containing methods for retrieving data.\n        metadata (MetadataService): Service containing methods for retrieving metadata.\n        services (list): Overview of all available services.\n    \"\"\"\n\n    version = API_VERSION\n\n    def __init__(\n        self, username: str, password: str, language: Literal[\"de\", \"en\"] = \"en\"\n    ) -&gt; None:\n\"\"\"Constructor for the `GenesisOnline` class.\n\n        Args:\n            username: username of the user's GENESIS-Online account.\n            password: password of the user's GENESIS-Online account.\n            language: language the user wants the response to be in.\n        \"\"\"\n        self.session = requests.Session()\n        self.session.params = {\n            \"username\": username,\n            \"password\": password,\n            \"language\": language,\n        }\n        self.username = username\n        self.password = password\n        self.language = language\n        self.test = TestService(self.session)\n        self.find = FindService(self.session)\n        self.catalogue = CatalogueService(self.session)\n        self.data = DataService(self.session)\n        self.metadata = MetadataService(self.session)\n        self.services = [\n            self.test._service,\n            self.find._service,\n            self.catalogue._service,\n            self.data._service,\n            self.metadata._service,\n        ]\n\n    @property\n    def username(self):\n\"\"\"Username of the user's GENESIS-Online account.\"\"\"\n        return self._username\n\n    @username.setter\n    def username(self, value: str):\n        self._username = value\n        self.session.params[\"username\"] = value\n\n    @property\n    def password(self):\n\"\"\"Password of the user's GENESIS-Online account.\"\"\"\n        return self._password\n\n    @password.setter\n    def password(self, value: str):\n        self._password = value\n        self.session.params[\"password\"] = value\n\n    @property\n    def language(self):\n\"\"\"Language the user wants the response to be in.\"\"\"\n        return self._language\n\n    @language.setter\n    def language(self, value: Literal[\"de\", \"en\"]):\n        self._language = value\n        self.session.params[\"language\"] = value\n\n    def check_api(self) -&gt; dict:\n\"\"\"Check if the GENESIS-Online API is online.\"\"\"\n        return self.test.whoami().get(JsonKeys.CONTENT)\n\n    def check_login(self) -&gt; dict:\n\"\"\"Check if the GENESIS-Online API credentials are valid.\"\"\"\n        return self.test.logincheck().get(JsonKeys.CONTENT)\n\n    def request(self, endpoint: str, **kwargs: str) -&gt; Any:\n\"\"\"Returns a raw response from the specified `endpoint`.\n\n        This function can be used to retrieve a completely unformatted response\n        from the GENESIS-Online API. This ensures that endpoints which are not\n        yet implemented can be accessed.\n\n        Args:\n            endpoint: The endpoint URL segment to which the request will be sent.\n            **kwargs: Additional keyword arguments to be sent as query parameters\n                in the request.\n\n        Returns:\n            Any: The returned content may be a JSON, binary or text.\n\n        Raises:\n            HTTPError: When the HTTP request returns an unsuccessful status code.\n            ConnectionError: When the client is unable to connect to the server.\n            TimeoutError: When the request times out.\n            RequestError: For any other type of request exception.\n            UnexpectedContentError: If the content type of the response is not\n                one of the expected content types. Expected types are\n                'application/json', 'image/png' and 'text/csv'.\n\n        Examples:\n            &gt;&gt;&gt; from genesisonline import GenesisOnline\n            &gt;&gt;&gt;\n            &gt;&gt;&gt; # request to get raw 'image/png' from the data service\n            &gt;&gt;&gt; go = GenesisOnline(username=\"your_username\", password=\"your_password\")\n            &gt;&gt;&gt; response = go.request(endpoint=\"data/chart2table\", name=\"12411-0001\")\n            &gt;&gt;&gt; print(response)\n        \"\"\"\n        return self.test.request(endpoint, **kwargs)\n</code></pre>"},{"location":"client/#genesisonline.client.GenesisOnline.language","title":"<code>language</code>  <code>property</code> <code>writable</code>","text":"<p>Language the user wants the response to be in.</p>"},{"location":"client/#genesisonline.client.GenesisOnline.password","title":"<code>password</code>  <code>property</code> <code>writable</code>","text":"<p>Password of the user's GENESIS-Online account.</p>"},{"location":"client/#genesisonline.client.GenesisOnline.username","title":"<code>username</code>  <code>property</code> <code>writable</code>","text":"<p>Username of the user's GENESIS-Online account.</p>"},{"location":"client/#genesisonline.client.GenesisOnline.__init__","title":"<code>__init__(username, password, language='en')</code>","text":"<p>Constructor for the <code>GenesisOnline</code> class.</p> <p>Parameters:</p> Name Type Description Default <code>username</code> <code>str</code> <p>username of the user's GENESIS-Online account.</p> required <code>password</code> <code>str</code> <p>password of the user's GENESIS-Online account.</p> required <code>language</code> <code>Literal['de', 'en']</code> <p>language the user wants the response to be in.</p> <code>'en'</code> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/client.py</code> <pre><code>def __init__(\n    self, username: str, password: str, language: Literal[\"de\", \"en\"] = \"en\"\n) -&gt; None:\n\"\"\"Constructor for the `GenesisOnline` class.\n\n    Args:\n        username: username of the user's GENESIS-Online account.\n        password: password of the user's GENESIS-Online account.\n        language: language the user wants the response to be in.\n    \"\"\"\n    self.session = requests.Session()\n    self.session.params = {\n        \"username\": username,\n        \"password\": password,\n        \"language\": language,\n    }\n    self.username = username\n    self.password = password\n    self.language = language\n    self.test = TestService(self.session)\n    self.find = FindService(self.session)\n    self.catalogue = CatalogueService(self.session)\n    self.data = DataService(self.session)\n    self.metadata = MetadataService(self.session)\n    self.services = [\n        self.test._service,\n        self.find._service,\n        self.catalogue._service,\n        self.data._service,\n        self.metadata._service,\n    ]\n</code></pre>"},{"location":"client/#genesisonline.client.GenesisOnline.check_api","title":"<code>check_api()</code>","text":"<p>Check if the GENESIS-Online API is online.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/client.py</code> <pre><code>def check_api(self) -&gt; dict:\n\"\"\"Check if the GENESIS-Online API is online.\"\"\"\n    return self.test.whoami().get(JsonKeys.CONTENT)\n</code></pre>"},{"location":"client/#genesisonline.client.GenesisOnline.check_login","title":"<code>check_login()</code>","text":"<p>Check if the GENESIS-Online API credentials are valid.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/client.py</code> <pre><code>def check_login(self) -&gt; dict:\n\"\"\"Check if the GENESIS-Online API credentials are valid.\"\"\"\n    return self.test.logincheck().get(JsonKeys.CONTENT)\n</code></pre>"},{"location":"client/#genesisonline.client.GenesisOnline.request","title":"<code>request(endpoint, **kwargs)</code>","text":"<p>Returns a raw response from the specified <code>endpoint</code>.</p> <p>This function can be used to retrieve a completely unformatted response from the GENESIS-Online API. This ensures that endpoints which are not yet implemented can be accessed.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint URL segment to which the request will be sent.</p> required <code>**kwargs</code> <code>str</code> <p>Additional keyword arguments to be sent as query parameters in the request.</p> <code>{}</code> <p>Returns:</p> Name Type Description <code>Any</code> <code>Any</code> <p>The returned content may be a JSON, binary or text.</p> <p>Raises:</p> Type Description <code>HTTPError</code> <p>When the HTTP request returns an unsuccessful status code.</p> <code>ConnectionError</code> <p>When the client is unable to connect to the server.</p> <code>TimeoutError</code> <p>When the request times out.</p> <code>RequestError</code> <p>For any other type of request exception.</p> <code>UnexpectedContentError</code> <p>If the content type of the response is not one of the expected content types. Expected types are 'application/json', 'image/png' and 'text/csv'.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; from genesisonline import GenesisOnline\n&gt;&gt;&gt;\n&gt;&gt;&gt; # request to get raw 'image/png' from the data service\n&gt;&gt;&gt; go = GenesisOnline(username=\"your_username\", password=\"your_password\")\n&gt;&gt;&gt; response = go.request(endpoint=\"data/chart2table\", name=\"12411-0001\")\n&gt;&gt;&gt; print(response)\n</code></pre> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/client.py</code> <pre><code>def request(self, endpoint: str, **kwargs: str) -&gt; Any:\n\"\"\"Returns a raw response from the specified `endpoint`.\n\n    This function can be used to retrieve a completely unformatted response\n    from the GENESIS-Online API. This ensures that endpoints which are not\n    yet implemented can be accessed.\n\n    Args:\n        endpoint: The endpoint URL segment to which the request will be sent.\n        **kwargs: Additional keyword arguments to be sent as query parameters\n            in the request.\n\n    Returns:\n        Any: The returned content may be a JSON, binary or text.\n\n    Raises:\n        HTTPError: When the HTTP request returns an unsuccessful status code.\n        ConnectionError: When the client is unable to connect to the server.\n        TimeoutError: When the request times out.\n        RequestError: For any other type of request exception.\n        UnexpectedContentError: If the content type of the response is not\n            one of the expected content types. Expected types are\n            'application/json', 'image/png' and 'text/csv'.\n\n    Examples:\n        &gt;&gt;&gt; from genesisonline import GenesisOnline\n        &gt;&gt;&gt;\n        &gt;&gt;&gt; # request to get raw 'image/png' from the data service\n        &gt;&gt;&gt; go = GenesisOnline(username=\"your_username\", password=\"your_password\")\n        &gt;&gt;&gt; response = go.request(endpoint=\"data/chart2table\", name=\"12411-0001\")\n        &gt;&gt;&gt; print(response)\n    \"\"\"\n    return self.test.request(endpoint, **kwargs)\n</code></pre>"},{"location":"services/catalogue/","title":"Catalogue","text":"<p>Functionality for interacting with the GENESIS-Online Catalogue service.</p>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService","title":"<code>CatalogueService</code>","text":"<p>             Bases: <code>BaseService</code></p> <p>Service containing methods for listing objects.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>class CatalogueService(BaseService):\n\"\"\"Service containing methods for listing objects.\"\"\"\n\n    _service = \"catalogue\"\n    endpoints = [\n        \"cubes\",\n        \"cubes2statistic\",\n        \"cubes2variable\",\n        \"jobs\",\n        \"modifieddata\",\n        \"qualitysigns\",\n        \"results\",\n        \"statistics\",\n        \"statistics2variable\",\n        \"tables\",\n        \"tables2statistics\",\n        \"tables2variables\",\n        \"terms\",\n        \"timeseries\",\n        \"timeseries2statistic\",\n        \"timeseries2variable\",\n        \"values\",\n        \"values2variable\",\n        \"variables\",\n        \"variables2statistic\",\n    ]\n\n    def __init__(self, session: requests.Session) -&gt; None:\n        super().__init__(session)\n\n    def __str__(self) -&gt; str:\n        return \"Service containing methods for listing objects.\"\n\n    def cubes(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of cubes from `area` according to the `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_CUBES, selection=selection, area=area, **api_params\n        )\n\n    def cubes2statistic(\n        self, name: str = None, selection: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a list of cubes related to statistics `name` from `area` according to the `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_CUBES2STATISTIC,\n            name=name,\n            selection=selection,\n            area=area,\n            **api_params,\n        )\n\n    def cubes2variable(\n        self, name: str = None, selection: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a list of cubes related to variable `name` from `area` according to the `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_CUBES2VARIABLE,\n            name=name,\n            selection=selection,\n            area=area,\n            **api_params,\n        )\n\n    def jobs(self, selection: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of batch jobs (i.e. very large tables) according to the parameters set.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_JOBS, selection=selection, **api_params\n        )\n\n    def modifieddata(self, selection: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of objects, recently updated according to the parameters set.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_MODIFIEDDATA, selection=selection, **api_params\n        )\n\n    def qualitysigns(self, **api_params) -&gt; dict:\n\"\"\"Returns the list of quality characters from `area`\"\"\"  # TODO area is not documented in user documentation\n        return self._request(Endpoints.CATALOGUE_QUALITYSIGNS, **api_params)\n\n    def results(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of results tables from `area` according to the `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_RESULTS, selection=selection, area=area, **api_params\n        )\n\n    def statistics(self, selection: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of statistics according to the parameters set.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_STATISTICS, selection=selection, **api_params\n        )\n\n    def statistics2variable(\n        self, name: str = None, selection: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a list of statistics related to variable `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_STATISTICS2VARIABLE,\n            name=name,\n            selection=selection,\n            area=area,\n            **api_params,\n        )\n\n    def tables(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of tables from `area` according to the parameters set\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_TABLES, selection=selection, area=area, **api_params\n        )\n\n    def tables2statistics(\n        self, name: str = None, selection: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a list of tables related to statistics `name` from `area` according to `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_TABLES2STATISTIC,\n            name=name,\n            selection=selection,\n            area=area,\n            **api_params,\n        )\n\n    def tables2variable(\n        self, name: str = None, selection: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a list of tables related to variable `name` from `area` according to `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_TABLES2VARIABLE,\n            name=name,\n            selection=selection,\n            area=area,\n            **api_params,\n        )\n\n    def terms(self, selection: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of terms according to the `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_TERMS, selection=selection, **api_params\n        )\n\n    def timeseries(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of timeseries from `area` according to `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_TIMESERIES, selection=selection, area=area, **api_params\n        )\n\n    def timeseries2statistic(\n        self, name: str = None, selection: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a list of timeseries related to statistic `name` from `area` according to `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_TIMESERIES2STATISTIC,\n            name=name,\n            selection=selection,\n            area=area,\n            **api_params,\n        )\n\n    def timeseries2variable(\n        self, name: str = None, selection: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a list of timeseries related to variable `name` from `area` according to `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_TIMESERIES2VARIABLE,\n            name=name,\n            selection=selection,\n            area=area,\n            **api_params,\n        )\n\n    def values(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of values from `area` according to the parameter set.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_VALUES, selection=selection, area=area, **api_params\n        )\n\n    def values2variable(\n        self, name: str = None, selection: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a list of values related to variable `name` from `area` according to `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_VALUES2VARIABLE,\n            name=name,\n            selection=selection,\n            area=area,\n            **api_params,\n        )\n\n    def variables(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of variables from `area` according to the parameter set.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_VARIABLES, selection=selection, area=area, **api_params\n        )\n\n    def variables2statistic(\n        self, name: str = None, selection: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a list of variables related to statistic `name` from `area` according to `selection`.\"\"\"\n        return self._request(\n            Endpoints.CATALOGUE_VARIABLES2STATISTIC,\n            name=name,\n            selection=selection,\n            area=area,\n            **api_params,\n        )\n\n    def _request(self, endpoint: str, **api_params) -&gt; dict:\n        response = super().request(endpoint, **api_params)\n\n        try:\n            return self._standardize_response(response)\n        except Exception as e:\n            raise StandardizationError(f\"Standardization error occured: {e}\") from e\n\n    def _standardize_response(self, response: dict) -&gt; dict:\n\"\"\"Standaridze response according to wrapper guidelines.\"\"\"\n        copyright = response.pop(JsonKeys.COPYRIGHT)\n\n        response[JsonKeys.CONTENT] = response.pop(JsonKeys.LIST)\n        response[JsonKeys.COPYRIGHT] = copyright\n        return response\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.cubes","title":"<code>cubes(selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of cubes from <code>area</code> according to the <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def cubes(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of cubes from `area` according to the `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_CUBES, selection=selection, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.cubes2statistic","title":"<code>cubes2statistic(name=None, selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of cubes related to statistics <code>name</code> from <code>area</code> according to the <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def cubes2statistic(\n    self, name: str = None, selection: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a list of cubes related to statistics `name` from `area` according to the `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_CUBES2STATISTIC,\n        name=name,\n        selection=selection,\n        area=area,\n        **api_params,\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.cubes2variable","title":"<code>cubes2variable(name=None, selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of cubes related to variable <code>name</code> from <code>area</code> according to the <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def cubes2variable(\n    self, name: str = None, selection: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a list of cubes related to variable `name` from `area` according to the `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_CUBES2VARIABLE,\n        name=name,\n        selection=selection,\n        area=area,\n        **api_params,\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.jobs","title":"<code>jobs(selection=None, **api_params)</code>","text":"<p>Returns a list of batch jobs (i.e. very large tables) according to the parameters set.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def jobs(self, selection: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of batch jobs (i.e. very large tables) according to the parameters set.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_JOBS, selection=selection, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.modifieddata","title":"<code>modifieddata(selection=None, **api_params)</code>","text":"<p>Returns a list of objects, recently updated according to the parameters set.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def modifieddata(self, selection: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of objects, recently updated according to the parameters set.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_MODIFIEDDATA, selection=selection, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.qualitysigns","title":"<code>qualitysigns(**api_params)</code>","text":"<p>Returns the list of quality characters from <code>area</code></p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def qualitysigns(self, **api_params) -&gt; dict:\n\"\"\"Returns the list of quality characters from `area`\"\"\"  # TODO area is not documented in user documentation\n    return self._request(Endpoints.CATALOGUE_QUALITYSIGNS, **api_params)\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.results","title":"<code>results(selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of results tables from <code>area</code> according to the <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def results(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of results tables from `area` according to the `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_RESULTS, selection=selection, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.statistics","title":"<code>statistics(selection=None, **api_params)</code>","text":"<p>Returns a list of statistics according to the parameters set.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def statistics(self, selection: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of statistics according to the parameters set.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_STATISTICS, selection=selection, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.statistics2variable","title":"<code>statistics2variable(name=None, selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of statistics related to variable <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def statistics2variable(\n    self, name: str = None, selection: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a list of statistics related to variable `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_STATISTICS2VARIABLE,\n        name=name,\n        selection=selection,\n        area=area,\n        **api_params,\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.tables","title":"<code>tables(selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of tables from <code>area</code> according to the parameters set</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def tables(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of tables from `area` according to the parameters set\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_TABLES, selection=selection, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.tables2statistics","title":"<code>tables2statistics(name=None, selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of tables related to statistics <code>name</code> from <code>area</code> according to <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def tables2statistics(\n    self, name: str = None, selection: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a list of tables related to statistics `name` from `area` according to `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_TABLES2STATISTIC,\n        name=name,\n        selection=selection,\n        area=area,\n        **api_params,\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.tables2variable","title":"<code>tables2variable(name=None, selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of tables related to variable <code>name</code> from <code>area</code> according to <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def tables2variable(\n    self, name: str = None, selection: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a list of tables related to variable `name` from `area` according to `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_TABLES2VARIABLE,\n        name=name,\n        selection=selection,\n        area=area,\n        **api_params,\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.terms","title":"<code>terms(selection=None, **api_params)</code>","text":"<p>Returns a list of terms according to the <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def terms(self, selection: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of terms according to the `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_TERMS, selection=selection, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.timeseries","title":"<code>timeseries(selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of timeseries from <code>area</code> according to <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def timeseries(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of timeseries from `area` according to `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_TIMESERIES, selection=selection, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.timeseries2statistic","title":"<code>timeseries2statistic(name=None, selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of timeseries related to statistic <code>name</code> from <code>area</code> according to <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def timeseries2statistic(\n    self, name: str = None, selection: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a list of timeseries related to statistic `name` from `area` according to `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_TIMESERIES2STATISTIC,\n        name=name,\n        selection=selection,\n        area=area,\n        **api_params,\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.timeseries2variable","title":"<code>timeseries2variable(name=None, selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of timeseries related to variable <code>name</code> from <code>area</code> according to <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def timeseries2variable(\n    self, name: str = None, selection: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a list of timeseries related to variable `name` from `area` according to `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_TIMESERIES2VARIABLE,\n        name=name,\n        selection=selection,\n        area=area,\n        **api_params,\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.values","title":"<code>values(selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of values from <code>area</code> according to the parameter set.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def values(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of values from `area` according to the parameter set.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_VALUES, selection=selection, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.values2variable","title":"<code>values2variable(name=None, selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of values related to variable <code>name</code> from <code>area</code> according to <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def values2variable(\n    self, name: str = None, selection: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a list of values related to variable `name` from `area` according to `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_VALUES2VARIABLE,\n        name=name,\n        selection=selection,\n        area=area,\n        **api_params,\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.variables","title":"<code>variables(selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of variables from <code>area</code> according to the parameter set.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def variables(self, selection: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a list of variables from `area` according to the parameter set.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_VARIABLES, selection=selection, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/catalogue/#genesisonline.services.catalogue.CatalogueService.variables2statistic","title":"<code>variables2statistic(name=None, selection=None, area=None, **api_params)</code>","text":"<p>Returns a list of variables related to statistic <code>name</code> from <code>area</code> according to <code>selection</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/catalogue.py</code> <pre><code>def variables2statistic(\n    self, name: str = None, selection: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a list of variables related to statistic `name` from `area` according to `selection`.\"\"\"\n    return self._request(\n        Endpoints.CATALOGUE_VARIABLES2STATISTIC,\n        name=name,\n        selection=selection,\n        area=area,\n        **api_params,\n    )\n</code></pre>"},{"location":"services/data/","title":"Data","text":"<p>Functionality for interacting with the GENESIS-Online Data service.</p>"},{"location":"services/data/#genesisonline.services.data.DataService","title":"<code>DataService</code>","text":"<p>             Bases: <code>BaseService</code></p> <p>Service containing methods for downloading data.</p> <p>This class offers methods to retrieve various data-related information, including charts, cubes, maps, and more, from the GENESIS-Online database.</p> <p>This service does not implement the following endpoints as they are redundant (due to the way responses are standardized here): - cubefile (call <code>cube</code> instead) - resultfile (call <code>result</code> instead) - tablefile (call <code>table</code> instead) - timeseriesfile (call <code>timeseries</code> instead)</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>class DataService(BaseService):\n\"\"\"Service containing methods for downloading data.\n\n    This class offers methods to retrieve various data-related information,\n    including charts, cubes, maps, and more, from the GENESIS-Online database.\n\n    This service does not implement the following endpoints as they are\n    redundant (due to the way responses are standardized here):&lt;br&gt;\n    - cubefile (call `cube` instead)&lt;br&gt;\n    - resultfile (call `result` instead)&lt;br&gt;\n    - tablefile (call `table` instead)&lt;br&gt;\n    - timeseriesfile (call `timeseries` instead)\n    \"\"\"\n\n    _service = \"data\"\n    endpoints = [\n        \"chart2result\",\n        \"chart2table\",\n        \"chart2timeseries\",\n        \"cube\",\n        \"map2result\",\n        \"map2table\",\n        \"map2timeseries\",\n        \"result\",\n        \"table\",\n        \"timeseries\",\n    ]\n\n    def __init__(\n        self, session: requests.Session, cache: Union[Path, str] = None\n    ) -&gt; None:\n\"\"\"\n        Args:\n            cache: path to where the results of large table operations are saved.\n                If `None`, results are stored in the user's home directory.\n        \"\"\"\n        super().__init__(session)\n        self._timeout = 30\n        self.filemanager = FileManager(cache)\n\n    def __str__(self) -&gt; str:\n        return \"Service containing methods for downloading data.\"\n\n    def load(self, result_id):\n        file_name = f\"{result_id}.json\"\n        return self.filemanager.load(file_name)\n\n    def save(self, object, result_id):\n        file_name = f\"{result_id}.json\"\n        self.filemanager.save(object, file_name)\n\n    def chart2result(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a chart related to results table `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.DATA_CHART2RESULT, name=name, area=area, **api_params\n        )\n\n    def chart2table(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a chart related to table `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.DATA_CHART2TABLE, name=name, area=area, **api_params\n        )\n\n    def chart2timeseries(\n        self, name: str = None, area: str = None, **api_params\n    ) -&gt; dict:\n\"\"\"Returns a chart related to timeseries `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.DATA_CHART2TIMESERIES, name=name, area=area, **api_params\n        )\n\n    def cube(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns cube `name` from `area` according to the parameters set.\"\"\"\n        return self._request(Endpoints.DATA_CUBE, name=name, area=area, **api_params)\n\n    def map2result(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a map related to results table `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.DATA_MAP2RESULT, name=name, area=area, **api_params\n        )\n\n    def map2table(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a map related to table `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.DATA_MAP2TABLE, name=name, area=area, **api_params\n        )\n\n    def map2timeseries(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a map related to timeseries `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.DATA_MAP2TIMESERIES, name=name, area=area, **api_params\n        )\n\n    def result(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns results table `name` from `area` according to the parameters set.\"\"\"\n        return self._request(Endpoints.DATA_RESULT, name=name, area=area, **api_params)\n\n    def table(\n        self,\n        wait_for_result: bool = True,\n        name: str = None,\n        area: str = None,\n        **api_params,\n    ) -&gt; dict:\n\"\"\"Returns table `name` from `area`according to the parameters set.\n\n        Async if `wait_for_result` = False.\n        \"\"\"\n        response = self._request(\n            Endpoints.DATA_TABLE, name=name, area=area, job=\"true\", **api_params\n        )\n\n        if response[JsonKeys.STATUS][JsonKeys.CODE] == ResponseStatus.BACKGROUND_RUN:\n            return self._get_batch_job_result(response, wait_for_result)\n        return response\n\n    def timeseries(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns timeseries `name` from `area` according to the parameters set.\"\"\"\n        return self._request(\n            Endpoints.DATA_TIMESERIES, name=name, area=area, **api_params\n        )\n\n    def _request(self, endpoint: str, **api_params) -&gt; dict:\n        response = super().request(endpoint, **api_params)\n\n        # check if non-empty json object\n        if isinstance(response, dict) and response[JsonKeys.OBJECT]:\n            # get rid of nested structure (standardization)\n            response[JsonKeys.OBJECT] = response[JsonKeys.OBJECT][JsonKeys.CONTENT]\n\n        # check if non-json object i.e. image or text file\n        if not isinstance(response, dict):\n            content = response  # rename response to something more descriptive\n            response = self._get_json_container(endpoint, api_params)\n            response[JsonKeys.OBJECT] = content\n\n        try:\n            return self._standardize_response(response)\n        except Exception as e:\n            raise StandardizationError(f\"Standardization error occured: {e}\") from e\n\n    def _standardize_response(self, response: dict) -&gt; dict:\n\"\"\"Standaridze response according to wrapper guidelines.\"\"\"\n        copyright = response.pop(JsonKeys.COPYRIGHT)\n        response[JsonKeys.CONTENT] = response.pop(JsonKeys.OBJECT)\n        response[JsonKeys.COPYRIGHT] = copyright\n        return response\n\n    def _get_json_container(self, endpoint: str, api_params: dict) -&gt; dict:\n\"\"\"Get an empty GO json container\"\"\"\n\n        # make API call with invalid parameters to get an empty \"json containter\"\n        api_params[\"name\"], name = \"\", api_params[\"name\"]\n        container = self._request(endpoint, **api_params)\n        if not isinstance(container, dict):\n            raise TypeError(f\"Expected json response but received: {container}\")\n\n        # update response status to 0 or 22\n        status_22 = re.findall(\n            r\"\\((.*?)\\)\", container[JsonKeys.STATUS][JsonKeys.CONTENT]\n        )\n        if status_22:\n            container[JsonKeys.STATUS][\n                JsonKeys.CODE\n            ] = ResponseStatus.PARTLY_MATCH.value\n            container[JsonKeys.STATUS][JsonKeys.CONTENT] = status_22[0]\n        else:  # i.e. status 0\n            container[JsonKeys.STATUS][JsonKeys.CODE] = ResponseStatus.MATCH.value\n            container[JsonKeys.STATUS][JsonKeys.CONTENT] = (\n                \"successfull\"\n                if container[JsonKeys.PARAMETER][\"language\"] == \"en\"\n                else \"erfolgreich\"\n            )\n        container[JsonKeys.PARAMETER][\"name\"] = name\n\n        return container\n\n    def _get_batch_job_result(self, response: dict, wait_for_result: bool) -&gt; dict:\n\"\"\"Synchronously or asynchronously retrieve the result of a batch job.\n\n        Note that the intermediate and final results are always saved to disk\n        as a json file (as they can be quite large?).\n\n        Args:\n            response: the response object containing the status and content of\n                the initial request. This response object is already formatted\n                to wrapper guidelines.\n            wait_for_result: if True, the method waits for the result before\n                returning. If False, a thread is started to probe for the\n                result asynchronously.\n        \"\"\"\n        result_id = response[JsonKeys.STATUS][JsonKeys.CONTENT].split(\" \")[-1]\n        language = response[JsonKeys.PARAMETER][\"language\"]\n\n        self.save(response, result_id)\n        if wait_for_result:\n            self._probe_for_result(result_id, language)\n        else:\n            thread = Thread(target=self._probe_for_result, args=(result_id, language))\n            thread.start()\n            response[JsonKeys.CONTENT] = result_id\n            self.save(response, result_id)\n\n        # load results as batch jobs are always saved as file\n        return self.load(result_id)\n\n    def _probe_for_result(self, result_id: str, language: Literal[\"de\", \"en\"]) -&gt; None:\n\"\"\"Probe for the result of a batch job in set time intervals.\n\n        The response will be stored as a json file.\n\n        Args:\n            result_id: the unique identifier for the result.\n            language: language the user wants the response to be in.\n        \"\"\"\n        while True:\n            logger.info(\n                f\"Checking for result '{result_id}' every {self._timeout} second(s).\"\n            )\n            result = self.result(name=result_id, language=language)\n            if result[JsonKeys.STATUS][JsonKeys.CODE] == ResponseStatus.MATCH:\n                primary_result = self.load(result_id)\n                primary_result[JsonKeys.CONTENT] = result[JsonKeys.CONTENT]\n                primary_result[JsonKeys.STATUS] = {\n                    JsonKeys.CODE: ResponseStatus.MATCH.value,\n                    JsonKeys.CONTENT: \"successfull\"\n                    if language == \"en\"\n                    else \"erfolgreich\",\n                    JsonKeys.TYPE: \"information\" if language == \"en\" else \"Information\",\n                }\n                self.save(primary_result, result_id)\n                return\n            time.sleep(self._timeout)  # TODO: parametrize?\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.__init__","title":"<code>__init__(session, cache=None)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>cache</code> <code>Union[Path, str]</code> <p>path to where the results of large table operations are saved. If <code>None</code>, results are stored in the user's home directory.</p> <code>None</code> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def __init__(\n    self, session: requests.Session, cache: Union[Path, str] = None\n) -&gt; None:\n\"\"\"\n    Args:\n        cache: path to where the results of large table operations are saved.\n            If `None`, results are stored in the user's home directory.\n    \"\"\"\n    super().__init__(session)\n    self._timeout = 30\n    self.filemanager = FileManager(cache)\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.chart2result","title":"<code>chart2result(name=None, area=None, **api_params)</code>","text":"<p>Returns a chart related to results table <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def chart2result(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a chart related to results table `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.DATA_CHART2RESULT, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.chart2table","title":"<code>chart2table(name=None, area=None, **api_params)</code>","text":"<p>Returns a chart related to table <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def chart2table(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a chart related to table `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.DATA_CHART2TABLE, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.chart2timeseries","title":"<code>chart2timeseries(name=None, area=None, **api_params)</code>","text":"<p>Returns a chart related to timeseries <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def chart2timeseries(\n    self, name: str = None, area: str = None, **api_params\n) -&gt; dict:\n\"\"\"Returns a chart related to timeseries `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.DATA_CHART2TIMESERIES, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.cube","title":"<code>cube(name=None, area=None, **api_params)</code>","text":"<p>Returns cube <code>name</code> from <code>area</code> according to the parameters set.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def cube(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns cube `name` from `area` according to the parameters set.\"\"\"\n    return self._request(Endpoints.DATA_CUBE, name=name, area=area, **api_params)\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.map2result","title":"<code>map2result(name=None, area=None, **api_params)</code>","text":"<p>Returns a map related to results table <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def map2result(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a map related to results table `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.DATA_MAP2RESULT, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.map2table","title":"<code>map2table(name=None, area=None, **api_params)</code>","text":"<p>Returns a map related to table <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def map2table(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a map related to table `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.DATA_MAP2TABLE, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.map2timeseries","title":"<code>map2timeseries(name=None, area=None, **api_params)</code>","text":"<p>Returns a map related to timeseries <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def map2timeseries(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns a map related to timeseries `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.DATA_MAP2TIMESERIES, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.result","title":"<code>result(name=None, area=None, **api_params)</code>","text":"<p>Returns results table <code>name</code> from <code>area</code> according to the parameters set.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def result(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns results table `name` from `area` according to the parameters set.\"\"\"\n    return self._request(Endpoints.DATA_RESULT, name=name, area=area, **api_params)\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.table","title":"<code>table(wait_for_result=True, name=None, area=None, **api_params)</code>","text":"<p>Returns table <code>name</code> from <code>area</code>according to the parameters set.</p> <p>Async if <code>wait_for_result</code> = False.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def table(\n    self,\n    wait_for_result: bool = True,\n    name: str = None,\n    area: str = None,\n    **api_params,\n) -&gt; dict:\n\"\"\"Returns table `name` from `area`according to the parameters set.\n\n    Async if `wait_for_result` = False.\n    \"\"\"\n    response = self._request(\n        Endpoints.DATA_TABLE, name=name, area=area, job=\"true\", **api_params\n    )\n\n    if response[JsonKeys.STATUS][JsonKeys.CODE] == ResponseStatus.BACKGROUND_RUN:\n        return self._get_batch_job_result(response, wait_for_result)\n    return response\n</code></pre>"},{"location":"services/data/#genesisonline.services.data.DataService.timeseries","title":"<code>timeseries(name=None, area=None, **api_params)</code>","text":"<p>Returns timeseries <code>name</code> from <code>area</code> according to the parameters set.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/data.py</code> <pre><code>def timeseries(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns timeseries `name` from `area` according to the parameters set.\"\"\"\n    return self._request(\n        Endpoints.DATA_TIMESERIES, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/find/","title":"Find","text":"<p>Functionality for interacting with the GENESIS-Online Find service.</p>"},{"location":"services/find/#genesisonline.services.find.FindService","title":"<code>FindService</code>","text":"<p>             Bases: <code>BaseService</code></p> <p>Service containing methods for finding information on objects.</p> <p>Objects can be cubes, statistics, tables, timeseries or variables.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/find.py</code> <pre><code>class FindService(BaseService):\n\"\"\"Service containing methods for finding information on objects.\n\n    Objects can be cubes, statistics, tables, timeseries or variables.\n    \"\"\"\n\n    _service = \"find\"\n    endpoints = [\"find\"]\n\n    def __init__(self, session: requests.Session) -&gt; None:\n        super().__init__(session)\n\n    def __str__(self) -&gt; str:\n        return \"Service containing methods for finding information on objects.\"\n\n    def find(self, term: str, category: str = None, **api_params) -&gt; dict:\n\"\"\"Returns lists of objects for a search `term`.\n\n        Objects can be cubes, statistics, tables, timeseries or variables.\n        \"\"\"\n        return self._request(\n            Endpoints.FIND_FIND, term=term, category=category, **api_params\n        )\n\n    def _request(self, endpoint: str, **api_params) -&gt; dict:\n        response = super().request(endpoint, **api_params)\n\n        try:\n            return self._standardize_response(response)\n        except Exception as e:\n            raise StandardizationError(f\"Standardization error occured: {e}\") from e\n\n    def _standardize_response(self, response: dict) -&gt; dict:\n\"\"\"Standaridze response according to wrapper guidelines.\"\"\"\n        copyright = response.pop(JsonKeys.COPYRIGHT)\n\n        response[JsonKeys.CONTENT] = {\n            JsonKeys.CUBES: response.pop(JsonKeys.CUBES),\n            JsonKeys.STATISTICS: response.pop(JsonKeys.STATISTICS),\n            JsonKeys.TABLES: response.pop(JsonKeys.TABLES),\n            JsonKeys.TIMESERIES: response.pop(JsonKeys.TIMESERIES),\n            JsonKeys.VARIABLES: response.pop(JsonKeys.VARIABLES),\n        }\n        response[JsonKeys.COPYRIGHT] = copyright\n        return response\n</code></pre>"},{"location":"services/find/#genesisonline.services.find.FindService.find","title":"<code>find(term, category=None, **api_params)</code>","text":"<p>Returns lists of objects for a search <code>term</code>.</p> <p>Objects can be cubes, statistics, tables, timeseries or variables.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/find.py</code> <pre><code>def find(self, term: str, category: str = None, **api_params) -&gt; dict:\n\"\"\"Returns lists of objects for a search `term`.\n\n    Objects can be cubes, statistics, tables, timeseries or variables.\n    \"\"\"\n    return self._request(\n        Endpoints.FIND_FIND, term=term, category=category, **api_params\n    )\n</code></pre>"},{"location":"services/metadata/","title":"Metadata","text":"<p>Functionality for interacting with the GENESIS-Online Metadata service.</p>"},{"location":"services/metadata/#genesisonline.services.metadata.MetadataService","title":"<code>MetadataService</code>","text":"<p>             Bases: <code>BaseService</code></p> <p>Service containing methods for downloading metadata.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/metadata.py</code> <pre><code>class MetadataService(BaseService):\n\"\"\"Service containing methods for downloading metadata.\"\"\"\n\n    _service = \"metadata\"\n    endpoints = [\"cube\", \"statistic\", \"table\", \"timeseries\", \"value\", \"variable\"]\n\n    def __init__(self, session: requests.Session) -&gt; None:\n        super().__init__(session)\n\n    def __str__(self) -&gt; str:\n        return \"Service containing methods for downloading metadata.\"\n\n    def cube(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the cube `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.METADATA_CUBE, name=name, area=area, **api_params\n        )\n\n    def statistic(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the statistic `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.METADATA_STATISTIC, name=name, area=area, **api_params\n        )\n\n    def table(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the table `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.METADATA_TABLE, name=name, area=area, **api_params\n        )\n\n    def timeseries(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the timeseries `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.METADATA_TIMESERIES, name=name, area=area, **api_params\n        )\n\n    def value(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the value `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.METADATA_VALUE, name=name, area=area, **api_params\n        )\n\n    def variable(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the variable `name` from `area`.\"\"\"\n        return self._request(\n            Endpoints.METADATA_VARIABLE, name=name, area=area, **api_params\n        )\n\n    def _request(self, endpoint: str, **api_params) -&gt; dict:\n        response = super().request(endpoint, **api_params)\n\n        try:\n            return self._standardize_response(response)\n        except Exception as e:\n            raise StandardizationError(f\"Standardization error occured: {e}\") from e\n\n    def _standardize_response(self, response: dict) -&gt; dict:\n\"\"\"Standaridze response according to wrapper guidelines.\"\"\"\n        copyright = response.pop(JsonKeys.COPYRIGHT)\n        response[JsonKeys.CONTENT] = response.pop(JsonKeys.OBJECT)\n        response[JsonKeys.COPYRIGHT] = copyright\n        return response\n</code></pre>"},{"location":"services/metadata/#genesisonline.services.metadata.MetadataService.cube","title":"<code>cube(name=None, area=None, **api_params)</code>","text":"<p>Returns the metadata of the cube <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/metadata.py</code> <pre><code>def cube(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the cube `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.METADATA_CUBE, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/metadata/#genesisonline.services.metadata.MetadataService.statistic","title":"<code>statistic(name=None, area=None, **api_params)</code>","text":"<p>Returns the metadata of the statistic <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/metadata.py</code> <pre><code>def statistic(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the statistic `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.METADATA_STATISTIC, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/metadata/#genesisonline.services.metadata.MetadataService.table","title":"<code>table(name=None, area=None, **api_params)</code>","text":"<p>Returns the metadata of the table <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/metadata.py</code> <pre><code>def table(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the table `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.METADATA_TABLE, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/metadata/#genesisonline.services.metadata.MetadataService.timeseries","title":"<code>timeseries(name=None, area=None, **api_params)</code>","text":"<p>Returns the metadata of the timeseries <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/metadata.py</code> <pre><code>def timeseries(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the timeseries `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.METADATA_TIMESERIES, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/metadata/#genesisonline.services.metadata.MetadataService.value","title":"<code>value(name=None, area=None, **api_params)</code>","text":"<p>Returns the metadata of the value <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/metadata.py</code> <pre><code>def value(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the value `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.METADATA_VALUE, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/metadata/#genesisonline.services.metadata.MetadataService.variable","title":"<code>variable(name=None, area=None, **api_params)</code>","text":"<p>Returns the metadata of the variable <code>name</code> from <code>area</code>.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/metadata.py</code> <pre><code>def variable(self, name: str = None, area: str = None, **api_params) -&gt; dict:\n\"\"\"Returns the metadata of the variable `name` from `area`.\"\"\"\n    return self._request(\n        Endpoints.METADATA_VARIABLE, name=name, area=area, **api_params\n    )\n</code></pre>"},{"location":"services/overview/","title":"Overview","text":"<p>The genesisonline package is designed to offer a one-to-one mapping of the GENESIS-Online web services. Each service in the GENESIS-Online API is encapsulated as a distinct class, with its respective endpoints  represented as class methods. Users can seamlessly access and interact with these services and their associated methods through the central <code>GenesisOnline</code> object.</p>"},{"location":"services/overview/#services","title":"Services","text":"<ul> <li><code>TestService</code>: maps methods from the HelloWorld service  for a first test of the API.</li> <li><code>FindService</code>: maps methods from the Find service to find information.</li> <li><code>CatalogueService</code>: maps methods from the Catalogue service to list objects.</li> <li><code>DataService</code>: maps methods from the Data service to download data.</li> <li><code>MetadataService</code>: maps methods from the Metadata service to download metadata.</li> </ul>"},{"location":"services/overview/#accessing-endpoints-through-genesisonline","title":"Accessing endpoints through <code>GenesisOnline</code>","text":"<p>The <code>GenesisOnline</code> object serves as the primary interface to interact with the GENESIS-Online web services. Each service is exposed as an attribute of this object, allowing users to directly access and utilize the methods associated with each service.</p> <pre><code>from genesisonline import GenesisOnline\n\n# initialize the GenesisOnline object\ngo = GenesisOnline(username=\"your_username\", password=\"your_password\")\n\n# accessing the HelloWorld service and its endpoints \nresponse = go.test.whoami()\n\n# accessing the Find service and its endpoints\nresponse = go.find.find()\n\n# accessing the Catalogue service and its endpoints\nresponse = go.catalogue.cubes()\n\n# accessing the Data service and its endpoints\nresponse = go.data.chart2results()\n\n# accessing the Metadata service and its endpoints\nresponse = go.metadata.cube()\n</code></pre>"},{"location":"services/test/","title":"Test","text":"<p>Functionality for interacting with the GENESIS-Online HelloWorld service.</p>"},{"location":"services/test/#genesisonline.services.test.TestService","title":"<code>TestService</code>","text":"<p>             Bases: <code>BaseService</code></p> <p>Service containing methods for testing the API.</p> <p>This service is euqivalent to the 'HelloWorld' service from the GO-API.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/test.py</code> <pre><code>class TestService(BaseService):\n\"\"\"Service containing methods for testing the API.\n\n    This service is euqivalent to the 'HelloWorld' service from the GO-API.\n    \"\"\"\n\n    __test__ = False  # mark for pytest (not a test class)\n\n    _service = \"helloworld\"\n    endpoints = [\"whoami\", \"logincheck\"]\n\n    def __init__(self, session: requests.Session) -&gt; None:\n        super().__init__(session)\n\n    def __str__(self) -&gt; str:\n        return \"Service containing methods for testing the API.\"\n\n    def whoami(self, **api_params) -&gt; dict:\n\"\"\"Returns the IP address and the user agent of the caller.\n\n        This allows to perform first tests of using the interface, without\n        having to specify any parameters.\n        \"\"\"\n        return self._request(Endpoints.TEST_WHOAMI, \"whoami\", **api_params)\n\n    def logincheck(self, **api_params) -&gt; dict:\n\"\"\"Returns whether or not login using the account data was successful.\n\n        This allows to perform first tests of using the interface, without\n        having to look deeper into the specification\n        \"\"\"\n        return self._request(Endpoints.TEST_LOGINCHECK, \"logincheck\", **api_params)\n\n    def _request(self, endpoint: str, calling_method: str, **api_params) -&gt; dict:\n        response = super().request(endpoint, **api_params)\n        try:\n            return self._standardize_response(response, calling_method)\n        except Exception as e:\n            raise StandardizationError(f\"Standardization error occured: {e}\") from e\n\n    def _standardize_response(self, response: dict, calling_method: str) -&gt; dict:\n\"\"\"Standaridze response according to wrapper guidelines.\"\"\"\n        standardized_response = {\n            JsonKeys.IDENT: {\n                JsonKeys.SERVICE: self._service,\n                JsonKeys.METHOD: calling_method,\n            },\n            JsonKeys.STATUS: {\n                JsonKeys.CODE: ResponseStatus.MATCH,\n                JsonKeys.CONTENT: JsonStrings.NA,\n                JsonKeys.TYPE: JsonStrings.NA,\n            },\n            JsonKeys.PARAMETER: {},\n            JsonKeys.CONTENT: response,\n            JsonKeys.COPYRIGHT: JsonStrings.NA,\n        }\n        return standardized_response\n</code></pre>"},{"location":"services/test/#genesisonline.services.test.TestService.logincheck","title":"<code>logincheck(**api_params)</code>","text":"<p>Returns whether or not login using the account data was successful.</p> <p>This allows to perform first tests of using the interface, without having to look deeper into the specification</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/test.py</code> <pre><code>def logincheck(self, **api_params) -&gt; dict:\n\"\"\"Returns whether or not login using the account data was successful.\n\n    This allows to perform first tests of using the interface, without\n    having to look deeper into the specification\n    \"\"\"\n    return self._request(Endpoints.TEST_LOGINCHECK, \"logincheck\", **api_params)\n</code></pre>"},{"location":"services/test/#genesisonline.services.test.TestService.whoami","title":"<code>whoami(**api_params)</code>","text":"<p>Returns the IP address and the user agent of the caller.</p> <p>This allows to perform first tests of using the interface, without having to specify any parameters.</p> Source code in <code>/opt/hostedtoolcache/Python/3.8.18/x64/lib/python3.8/site-packages/genesisonline/services/test.py</code> <pre><code>def whoami(self, **api_params) -&gt; dict:\n\"\"\"Returns the IP address and the user agent of the caller.\n\n    This allows to perform first tests of using the interface, without\n    having to specify any parameters.\n    \"\"\"\n    return self._request(Endpoints.TEST_WHOAMI, \"whoami\", **api_params)\n</code></pre>"}]}